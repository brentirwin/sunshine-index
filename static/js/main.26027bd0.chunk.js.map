{"version":3,"sources":["img/darksky.png","ZipForm.js","DarkSky.js","colors.js","CurrentWeather.js","UVKey.js","times.js","FutureWeather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ZipForm","props","react_default","a","createElement","onSubmit","e","handleSubmit","type","value","onChange","handleChange","DarkSky","id","href","src","image","alt","colorMap","num","CurrentWeather","init","location","weather","temp","Math","round","temperature","icon","toUpperCase","split","join","feelsLike","apparentTemperature","humidity","clouds","cloudCover","uv","uvIndex","wind","windSpeed","console","log","style","color","backgroundColor","border","styles","className","react_skycons_default","UVKey","arr","map","x","key","times","time","toString","FutureWeather","hourly","data","slice","hour","Date","getHours","parseInt","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","zip","locData","initialized","loading","handleZip","bind","assertThisInitialized","getWeather","event","setState","target","getData","_callee","url_zip","url_weather","regenerator_default","wrap","_context","prev","next","abrupt","sampleData","axios","get","then","res","places","catch","err","sent","latitude","longitude","stop","preventDefault","test","src_ZipForm","src_UVKey","src_CurrentWeather","currently","src_FutureWeather","src_DarkSky","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.26027bd0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/darksky.80edb981.png\";","import React from 'react';\n\nconst ZipForm = props => {\n  return (\n    <form onSubmit={(e) => props.handleSubmit(e)}>\n      <input\n        type=\"text\"\n        value={props.value}\n        onChange={(e) => props.handleChange(e)}\n        />\n      <input\n        type=\"submit\"\n        value=\"Go\"\n        />\n    </form>\n  );\n}\n\nexport default ZipForm;\n","import React from 'react';\nimport image from './img/darksky.png';\n\nconst DarkSky = props => {\n  return (\n    <div id=\"darksky\">\n      <a href=\"https://darksky.net/poweredby/\">\n        <img src={image} alt=\"Powered by DarkSky\"/>\n      </a>\n    </div>\n  );\n}\n\nexport default DarkSky;\n","export const colorMap = num => {\n  const colors = ['99e6cc', // 0\n                  'cce6cc', // 1\n                  'cce600', // 2\n                  'ffff00', // 3\n                  'ffcc00', // 4\n                  'ff9900', // 5\n                  'ff6600', // 6\n                  'ff0000', // 7\n                  'cc0000', // 8\n                  '990000', // 9\n                  '660000', // 10\n                  '660066', // 11\n                  '990099'  // 12\n                 ];\n  return '#' + colors[num];\n}\n","import React from 'react';\nimport { colorMap } from './colors.js';\nimport Skycons from 'react-skycons';\n\nconst CurrentWeather = props => {\n  if (!props.init) return null;\n\n  const location = props.location['place name']\n                   + ', '\n                   + props.location['state abbreviation'];\n  const weather = {\n    temp: Math.round(props.weather.temperature),\n    icon: props.weather.icon.toUpperCase().split('-').join('_'),\n    feelsLike: Math.round(props.weather.apparentTemperature),\n    humidity: props.weather.humidity,\n    clouds: props.weather.cloudCover,\n    uv: props.weather.uvIndex,\n    wind: props.weather.windSpeed\n  };\n\n  const styles = () => {\n    const color = colorMap(weather.uv);\n    return {\n      backgroundColor: color + '80',\n      border: '5px solid ' + color\n    }\n  }\n\n\n  console.log(weather.icon);\n  return(\n    <div id=\"current\" style={styles()}>\n      <h2>{location}</h2>\n      <div id=\"current-weather\">\n        <div className=\"left\">\n          {weather.temp}°\n        </div>\n        <div className=\"middle\">\n          <ul>\n            <li>UV Index: <b>{weather.uv}</b></li>\n            <li>Feels Like: <b>{weather.feelsLike}°</b></li>\n            <li>Humidity: <b>{weather.humidity}</b></li>\n          </ul>\n        </div>\n        <div className=\"right\">\n          <Skycons\n            color='black'\n            icon={weather.icon}\n            />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CurrentWeather;\n","import React from 'react';\nimport { colorMap } from './colors.js';\n\nconst UVKey = props => {\n  const arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((x, key) => {\n    return (\n      <div \n        key={key}\n        style={{ backgroundColor: colorMap(x),\n                 color: x < 8 ? '#000' : '#ddd' }}>\n        {x}\n      </div>\n    );\n  });\n  return <div className=\"uv-key\">{arr}</div>\n}\n\nexport default UVKey;\n","export const times = time => {\n  return [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11][time % 12].toString()\n          + ' ' + (time < 12 ? 'am' : 'pm');\n}\n","import React from 'react';\nimport { colorMap } from './colors.js';\nimport { times } from './times.js';\nimport Skycon from 'react-skycons';\n\nconst FutureWeather = props => {\n  if (!props.init) return null;\n\n  const hourly = props.hourly.data.slice(0,12).map((hour, key) => {\n    const time = new Date(hour.time*1000).getHours();\n    const weather = {\n      temp: Math.round(hour.temperature),\n      icon: hour.icon.toUpperCase().split('-').join('_'),\n      uv: hour.uvIndex,\n      time: times(parseInt(time))\n    };\n\n    const styles = () => {\n      const color = colorMap(weather.uv);\n      return {\n        backgroundColor: color + '80',\n        border: '5px solid ' + color\n      }\n    }\n\n    return (\n      <div\n        key={key}\n        style={styles()}\n        className=\"hour\"\n        >\n        <span className=\"time\">{weather.time}</span>\n        <span className=\"temp\">{weather.temp}</span>\n        <span className=\"uv\">{weather.uv}</span>\n        <span className=\"skycon\">\n          <div>\n          <Skycon\n            color=\"black\"\n            icon={weather.icon}\n          />\n          </div>\n        </span>\n      </div>\n    );\n  });\n\n  return (\n    <div id=\"future-weather\">\n      <div\n        key=\"key\"\n        style={{ backgroundColor: '#ffffff80', border: '5px solid white'}}\n        className=\"key\"\n        >\n        <span>Time</span>\n        <span>Temp</span>\n        <span>UV</span>\n        <span></span>\n      </div>\n      {hourly}\n    </div>\n  );\n}\n\nexport default FutureWeather;\n","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { darkSkyAPIkey } from './darksky-api.js';\nimport sampleData from './sampleData.json';\nimport ZipForm from './ZipForm.js';\nimport DarkSky from './DarkSky.js';\nimport CurrentWeather from './CurrentWeather.js';\nimport UVKey from './UVKey.js';\nimport FutureWeather from './FutureWeather.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      zip: 'enter zip',\n      locData: {},\n      weather: {},\n      initialized: false,\n      loading: false\n    };\n\n    this.handleZip = this.handleZip.bind(this);\n    this.getWeather = this.getWeather.bind(this);\n  }\n\n  handleZip(event) {\n    this.setState({ zip: event.target.value });\n  }\n\n  async getWeather(event) {\n    event.preventDefault();\n\n    // Quick check if ZIP is 5 digits\n    const regex = /^\\d{1,5}$/;\n    if (!regex.test(this.state.zip) && this.state.zip !== 'enter zip')\n      return;\n\n    this.setState({ loading: true });\n\n    async function getData(zip) {\n      // Dev without making API calls\n      if (zip === 'enter zip') return sampleData;\n\n      // Get loc data from ZIP\n      const url_zip = \"https://api.zippopotam.us/us/\" + zip;\n      const locData = await axios.get(url_zip).then(res => {\n        return res.data.places[0];\n      }).catch(err => {\n        console.log('Not a valid ZIP');\n      });\n\n      // Get weather data with loc data\n      const url_weather = \"https://corsanywhere.herokuapp.com/https://api.darksky.net/forecast/\" + darkSkyAPIkey + \"/\" + locData.latitude + \",\" + locData.longitude;\n      const weather = await axios.get(url_weather).then(res => {\n        const data = res.data;\n        return data;\n      }).catch(err => {\n        console.log('error with darkSky API');\n        console.log(err);\n      });\n      return { locData, weather };\n    }\n    \n    const { locData, weather } = await getData(this.state.zip);\n   \n    this.setState({\n      locData: locData,\n      weather: weather,\n      loading: false,\n      initialized: true\n    });\n\n    console.log('locData: ', locData);\n    console.log('weather: ', weather);\n  \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <main>\n          <ZipForm\n            value={this.state.zip}\n            handleSubmit={this.getWeather}\n            handleChange={this.handleZip}\n            />\n          <UVKey />\n          <p>\n            { this.state.loading ? 'Loading...' : '' }\n          </p>\n          <CurrentWeather\n            weather={this.state.weather.currently}\n            location={this.state.locData}\n            init={this.state.initialized}\n            />\n          <FutureWeather\n            hourly={this.state.weather.hourly}\n            init={this.state.initialized}\n            />\n          <DarkSky />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}